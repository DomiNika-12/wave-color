import Head from 'next/head'
import Image from 'next/image'
import { ChangeEvent, useCallback, useState } from 'react'
import styles from '../styles/Home.module.css'

function calculateGaussian(alpha: number, peak: number, stdDevLeft: number, stdDevRight: number) {
  if (alpha < peak) {
    let r = (Math.exp((-0.5 * Math.pow((alpha - peak), 2)) / Math.pow(stdDevLeft, 2)))
    return r
  }
  // Alpha >= peak
  return (Math.exp((-0.5 * Math.pow((alpha - peak), 2)) / Math.pow(stdDevRight, 2)))
}

function calculateX(alpha: number) {
  let r = (1.056 * calculateGaussian(alpha, 599.8, 37.9, 31) + 0.362 * calculateGaussian(alpha, 442, 16, 26.7) - 0.065 * calculateGaussian(alpha, 501.1, 20.4, 26.2))
  console.log("Alpha" + alpha + " x: " + r)
  return r
}

function calculateY(alpha: number) {
  let r = (0.821 * calculateGaussian(alpha, 568.8, 46.9, 40.5) + 0.286 * calculateGaussian(alpha, 530.9, 16.3, 31.1))
  console.log("Alpha" + alpha + " y: " + r)
  return r
}

function calculateZ(alpha: number) {
  let r = (1.217 * calculateGaussian(alpha, 437, 11.8, 36) + 0.681 * calculateGaussian(alpha, 459, 26, 13.8))
  console.log("Alpha" + alpha + " z: " + r)
  return r
}

function calculateR(alpha: number) {
  let r = (3.2406 * calculateX(alpha) + (-1.5372 * calculateY(alpha)) + (-0.4986 * calculateZ(alpha)))
  let n = normalize(r)
  console.log("Normalized R: " + n + " r: " + r)
  return n
}

function calculateG(alpha: number) {
  let r = (-0.9689 * calculateX(alpha) + 1.8758 * calculateY(alpha) + 0.0415 * calculateZ(alpha))
  let n = normalize(r)
  console.log("Normalized G: " + n + " r: " + r)
  return n
}

function calculateB(alpha: number) {
  let r = (0.0557 * calculateX(alpha) - 0.2040 * calculateY(alpha) + 1.0570 * calculateZ(alpha))
  let n = normalize(r)
  console.log("Normalized B: " + n + " r: " + r)
  return n
}

function normalize(C: number) {
  if (C <= 0.0031308) {
    return 12.92 * C
  }
  return (1.055 * Math.pow(C, 1 / 2.4) - 0.055)
}

export default function Home() {
  const [alpha, setAlpha] = useState(0)

  const alphaChangeHandler = (e: any) => {
    let alphaNew: number = 0;
    if (e.target.value === 'NaN') {
      console.log(e.target.value)
      setAlpha(alphaNew)
    }
    else {
      alphaNew = parseFloat(e.target.value)
      setAlpha(alphaNew)
      console.log(`rgb(${calculateR(alphaNew)}, ${calculateG(alphaNew).toFixed(2)}, ${calculateB(alphaNew).toFixed(2)})`)
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <img src={'/spectrum.jpg'} width={'800px'} />
        <div style={{
          width: '800px', height: '100px',
          backgroundColor: `rgb(${(calculateR(alpha) * 255).toFixed(0)},${(calculateG(alpha) * 255).toFixed(0)}, ${(calculateB(alpha) * 255).toFixed(0)})`
        }}></div>
        <input value={alpha} onChange={alphaChangeHandler} type='number' />
        <h1 className={styles.title}>
          {alpha}
          <div>
            {`rgb(${(calculateR(alpha) * 255).toFixed(0)},${(calculateG(alpha) * 255).toFixed(0)}, ${(calculateB(alpha) * 255).toFixed(0)})`}
          </div>
        </h1>



      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
